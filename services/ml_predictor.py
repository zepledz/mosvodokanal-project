# ml_predictor.py
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import joblib
from sqlalchemy import create_engine, text
import numpy as np
import logging
import os
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class WaterConsumptionPredictor:
    def __init__(self, database_url):
        self.model = None
        self.database_url = database_url
        self.model_path = 'water_anomaly_model.pkl'
        self.label_encoders = {}
        self.load_model()

    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ —ç–Ω–∫–æ–¥–µ—Ä—ã
            model_data = joblib.load(self.model_path)
            self.model = model_data['model']
            self.label_encoders = model_data.get('label_encoders', {})
            logger.info("‚úÖ ML –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
        except Exception as e:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {e}. –ë—É–¥–µ—Ç –æ–±—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å.")
            self.model = None
            self.label_encoders = {}

    def prepare_features(self, measurement):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            if isinstance(measurement, list):
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å–ø–∏—Å–æ–∫, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                measurement = measurement[0] if measurement else {}

            timestamp = datetime.fromisoformat(measurement['timestamp'].replace('Z', '+00:00'))

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            hvs_value = float(measurement['hvs_value'])
            gvs_value = float(measurement.get('gvs_value', measurement.get('gvs_total', 0)))
            deviation = float(measurement['deviation'])

            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ì–í–° (—Å fallback)
            gvs_flow1 = float(measurement.get('gvs_flow1', measurement.get('gvs_flow1_value', 0)))
            gvs_flow2 = float(measurement.get('gvs_flow2', measurement.get('gvs_flow2_value', 0)))

            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = [
                hvs_value,  # –•–í–°
                gvs_value,  # –ì–í–° –æ–±—â–µ–µ
                deviation,  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                timestamp.hour,  # –ß–∞—Å (0-23)
                timestamp.weekday(),  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-6)
                timestamp.day,  # –î–µ–Ω—å –º–µ—Å—è—Ü–∞ (1-31)
                timestamp.month,  # –ú–µ—Å—è—Ü (1-12)
            ]

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            features.extend([
                gvs_flow1,  # –ì–í–° –∫–∞–Ω–∞–ª 1
                gvs_flow2,  # –ì–í–° –∫–∞–Ω–∞–ª 2
                timestamp.minute,  # –ú–∏–Ω—É—Ç—ã
                timestamp.second % 10,
                hvs_value ** 0.5,  # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –•–í–°
                gvs_value ** 0.5,  # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –ì–í–°
                abs(deviation),  # –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                deviation ** 2,  # –ö–≤–∞–¥—Ä–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            ])

            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º 15 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            if len(features) < 15:
                features.extend([0] * (15 - len(features)))
            elif len(features) > 15:
                features = features[:15]

            return np.array(features).reshape(1, -1)  # –í–∞–∂–Ω–æ: reshape –¥–ª—è predict_proba

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return np.zeros((1, 15))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã

    def _encode_feature(self, feature_name, value):
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        if feature_name not in self.label_encoders:
            self.label_encoders[feature_name] = LabelEncoder()
            # –ü–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º –æ–±—É—á–∏—Ç—å —ç–Ω–∫–æ–¥–µ—Ä, –≤–µ—Ä–Ω–µ–º —Ö—ç—à
            return hash(str(value)) % 1000
        try:
            return self.label_encoders[feature_name].transform([str(value)])[0]
        except:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–µ, –≤–µ—Ä–Ω–µ–º -1
            return -1

    def train_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            from models import get_db, WaterMeasurement
            db = next(get_db())

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            from datetime import datetime, timedelta
            thirty_days_ago = datetime.now() - timedelta(days=30)
            measurements = db.query(WaterMeasurement).filter(
                WaterMeasurement.measurement_timestamp >= thirty_days_ago
            ).all()

            if len(measurements) < 10:  # –£–ú–ï–ù–¨–®–ò–õ–ò –î–û 10 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {len(measurements)} –∑–∞–ø–∏—Å–µ–π")
                # –í–û–ó–í–†–ê–©–ê–ï–ú False —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞
                return False  # ‚úÖ –ù–ï —Å–æ–∑–¥–∞–µ–º rule-based –º–æ–¥–µ–ª—å!

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            X = []
            y = []

            for m in measurements:
                features = self.prepare_features({
                    'hvs_value': float(m.hvs_value),
                    'gvs_value': float(m.gvs_total),
                    'gvs_flow1': float(m.gvs_flow1_value),
                    'gvs_flow2': float(m.gvs_flow2_value),
                    'deviation': float(m.deviation),
                    'timestamp': m.measurement_timestamp.isoformat(),
                    'building_id': m.building_id
                })

                if len(features) == 15:
                    X.append(features)
                    y.append(1 if float(m.deviation) > 10 else 0)

            if len(X) == 0:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return False  # ‚úÖ –ù–ï —Å–æ–∑–¥–∞–µ–º rule-based –º–æ–¥–µ–ª—å!

            if len(np.unique(y)) < 2:
                logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return False  # ‚úÖ –ù–ï —Å–æ–∑–¥–∞–µ–º rule-based –º–æ–¥–µ–ª—å!

            # –û–±—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–π ML –º–æ–¥–µ–ª–∏
            from sklearn.ensemble import RandomForestClassifier
            self.model = RandomForestClassifier(
                n_estimators=100,
                random_state=42,
                max_depth=10,
                min_samples_split=5
            )
            self.model.fit(X, y)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            self.save_model()

            accuracy = self.model.score(X, y)
            logger.info(f"‚úÖ –ù–∞—Å—Ç–æ—è—â–∞—è ML –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é: {accuracy:.2f}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return False  # ‚úÖ –ù–ï —Å–æ–∑–¥–∞–µ–º rule-based –º–æ–¥–µ–ª—å –ø—Ä–∏ –æ—à–∏–±–∫–µ!

    def save_model(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Ñ–∞–π–ª - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if self.model is not None:
                model_data = {
                    'model': self.model,
                    'label_encoders': self.label_encoders
                }
                joblib.dump(model_data, self.model_path)
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.model_path}")
                logger.info(f"üìÅ –¢–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {type(self.model)}")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å None, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            import traceback
            logger.error(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return False

    def predict_anomaly_risk(self, current_data):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if self.model is None or self.model == "simple_rule_based":
                # Fallback –Ω–∞ rule-based
                deviation = current_data.get('deviation', 0)
                risk_score = min(deviation / 50.0, 1.0)
                return risk_score

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            prediction_data = current_data.copy()

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
            if 'gvs_value' not in prediction_data and 'gvs_total' in prediction_data:
                prediction_data['gvs_value'] = prediction_data['gvs_total']

            if 'timestamp' not in prediction_data:
                prediction_data['timestamp'] = datetime.now().isoformat()

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫!
            features = self.prepare_features(prediction_data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç predict_proba
            if hasattr(self.model, 'predict_proba'):
                risk_score = self.model.predict_proba(features)[0][1]  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏
            else:
                # –î–ª—è rule-based –º–æ–¥–µ–ª–µ–π
                deviation = current_data.get('deviation', 0)
                risk_score = min(deviation / 50.0, 1.0)

            return risk_score

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            deviation = current_data.get('deviation', 0)
            return min(deviation / 50.0, 1.0)
    def get_model_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
        if self.model is None or self.model == "simple_rule_based":
            return {
                "model_type": "rule_based",
                "status": "active",
                "features": ["deviation_based"]
            }
        else:
            return {
                "model_type": "random_forest",
                "status": "active",
                "feature_count": len(self.model.feature_importances_),
                "feature_importance_max": float(np.max(self.model.feature_importances_)),
                "n_estimators": self.model.n_estimators
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä predictor
ml_predictor = None


def initialize_ml_predictor(database_url):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML predictor"""
    global ml_predictor
    try:
        ml_predictor = WaterConsumptionPredictor(database_url)
        logger.info("‚úÖ ML predictor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            if ml_predictor.train_model():
                model_info = ml_predictor.get_model_info()
                logger.info(f"‚úÖ ML –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞. –¢–∏–ø: {model_info['model_type']}")
            else:
                logger.warning("‚ö†Ô∏è ML –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è rule-based –ø–æ–¥—Ö–æ–¥")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å rule-based –º–æ–¥–µ–ª—å—é

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML predictor: {e}")
        ml_predictor = None


def get_ml_predictor():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä ML predictor"""
    return ml_predictor