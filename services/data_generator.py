# data_generator.py
import json
import random
import time
import logging
import uuid
from datetime import datetime, timedelta
from confluent_kafka import Producer
import threading
from models import WaterMeasurement, BuildingStats, ITP, MKD, get_db, init_db
from sqlalchemy.orm import Session
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class DataGenerator:
    def __init__(self):
        self.bootstrap_servers = os.getenv('KAFKA_BOOTSTRAP_SERVERS', 'kafka:9092')
        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka: {self.bootstrap_servers}")
        self.producer = Producer({'bootstrap.servers': self.bootstrap_servers})

        self.buildings = self.generate_buildings(50)
        self.running = False
        self.thread = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db_session = None
        self.setup_database()

    def setup_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            init_db()
            self.db_session = next(get_db())
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.db_session = None

    def generate_buildings(self, count):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–¥–∞–Ω–∏–π —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ò–¢–ü"""
        buildings = []
        moscow_districts = [
            "–¶–ê–û", "–°–ê–û", "–°–í–ê–û", "–í–ê–û", "–Æ–í–ê–û",
            "–Æ–ê–û", "–Æ–ó–ê–û", "–ó–ê–û", "–°–ó–ê–û", "–ù–ê–û"
        ]

        for i in range(count):
            district = random.choice(moscow_districts)
            itp_id = f"itp_{random.randint(1, 5)}"  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –æ–¥–Ω–æ–º—É –∏–∑ 5 –ò–¢–ü

            buildings.append({
                'building_id': f"bld_{i + 1}",
                'address': f"–≥. –ú–æ—Å–∫–≤–∞, {district}, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. {random.randint(1, 100)}",
                'fias_id': str(uuid.uuid4()),
                'unom': str(random.randint(10000, 99999)),
                'device_id': f"dev_{i + 1:03d}",
                'itp_id': itp_id,
                'hvs_water_meter_id': f"hvs_meter_{i + 1:04d}",
                'gvs_flowmeter1_id': f"gvs1_meter_{i + 1:04d}",
                'gvs_flowmeter2_id': f"gvs2_meter_{i + 1:04d}"
            })
        return buildings

    def generate_scenario(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã"""
        scenarios = {
            'normal': (0.5, 2.0, 0.3, 1.5, 0, 0.5),  # hvs_min, hvs_max, gvs1_min, gvs1_max, gvs2_min, gvs2_max
            'high_consumption': (2.0, 5.0, 1.5, 4.0, 0.1, 1.0),
            'low_consumption': (0.1, 1.0, 0.1, 0.8, 0, 0.2),
            'anomaly_hvs': (5.0, 10.0, 0.3, 1.5, 0, 0.3),  # –ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ –•–í–°
            'anomaly_gvs': (0.5, 2.0, 3.0, 8.0, 0.5, 2.0),  # –ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ –ì–í–°
            'zero_consumption': (0.0, 0.1, 0.0, 0.1, 0.0, 0.05)
        }

        return random.choices(
            list(scenarios.keys()),
            weights=[0.6, 0.15, 0.1, 0.05, 0.05, 0.05],
            k=1
        )[0]

    def generate_measurement(self, building):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å –¥–≤—É–º—è –∫–∞–Ω–∞–ª–∞–º–∏ –ì–í–°"""
        scenario = self.generate_scenario()
        scenarios = {
            'normal': (0.5, 2.0, 0.3, 1.5, 0, 0.5),
            'high_consumption': (2.0, 5.0, 1.5, 4.0, 0.1, 1.0),
            'low_consumption': (0.1, 1.0, 0.1, 0.8, 0, 0.2),
            'anomaly_hvs': (5.0, 10.0, 0.3, 1.5, 0, 0.3),
            'anomaly_gvs': (0.5, 2.0, 3.0, 8.0, 0.5, 2.0),
            'zero_consumption': (0.0, 0.1, 0.0, 0.1, 0.0, 0.05)
        }

        hvs_min, hvs_max, gvs1_min, gvs1_max, gvs2_min, gvs2_max = scenarios[scenario]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        hvs_value = round(random.uniform(hvs_min, hvs_max), 3)
        gvs_flow1_value = round(random.uniform(gvs1_min, gvs1_max), 3)
        gvs_flow2_value = round(random.uniform(gvs2_min, gvs2_max), 3)
        gvs_total = round(gvs_flow1_value - gvs_flow2_value, 3)

        data = {
            'measurement_id': str(uuid.uuid4()),
            'device_id': building['device_id'],  # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ device_id –∑–∞–ø–æ–ª–Ω–µ–Ω
            'building_id': building['building_id'],
            'itp_id': building['itp_id'],  # –î–æ–±–∞–≤–ª—è–µ–º itp_id
            'address': building['address'],
            'fias_id': building['fias_id'],
            'unom': building['unom'],

            # –•–í–° –¥–∞–Ω–Ω—ã–µ
            'hvs_water_meter_id': building['hvs_water_meter_id'],
            'hvs_value': hvs_value,

            # –ì–í–° –¥–∞–Ω–Ω—ã–µ (–¥–≤–∞ –∫–∞–Ω–∞–ª–∞)
            'gvs_flowmeter1_id': building['gvs_flowmeter1_id'],
            'gvs_flow1_value': gvs_flow1_value,
            'gvs_flowmeter2_id': building['gvs_flowmeter2_id'],
            'gvs_flow2_value': gvs_flow2_value,
            'gvs_total': gvs_total,

            'scenario': scenario,
            'timestamp': datetime.utcnow().isoformat() + 'Z'
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Kafka
        self.producer.produce('water_measurements', json.dumps(data))
        self.producer.poll(0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.save_to_database(data)

        return data
    def save_to_database(self, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
        if not self.db_session:
            logger.warning("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        try:
            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ device_id –Ω–µ None
            device_id = data.get('device_id')
            if not device_id:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º device_id: {data['building_id']}")
                return

            # –†–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –•–í–° –∏ –ì–í–°
            hvs_value = float(data['hvs_value'])
            gvs_total = float(data['gvs_total'])

            if hvs_value > 0:
                deviation = abs((gvs_total / hvs_value) - 1) * 100
            else:
                deviation = 0

            is_anomaly = deviation > 10

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
            measurement = WaterMeasurement(
                measurement_id=data['measurement_id'],
                building_id=data['building_id'],
                address=data['address'],
                device_id=device_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π device_id
                fias_id=data.get('fias_id'),
                unom=data.get('unom'),

                # –•–í–° –¥–∞–Ω–Ω—ã–µ
                hvs_water_meter_id=data['hvs_water_meter_id'],
                hvs_value=hvs_value,

                # –ì–í–° –¥–∞–Ω–Ω—ã–µ (–¥–≤–∞ –∫–∞–Ω–∞–ª–∞)
                gvs_flowmeter1_id=data['gvs_flowmeter1_id'],
                gvs_flow1_value=float(data['gvs_flow1_value']),
                gvs_flowmeter2_id=data['gvs_flowmeter2_id'],
                gvs_flow2_value=float(data['gvs_flow2_value']),
                gvs_total=gvs_total,

                deviation=deviation,
                is_anomaly=is_anomaly,
                scenario=data['scenario'],
                measurement_timestamp=datetime.fromisoformat(data['timestamp'].replace('Z', '+00:00'))
            )

            self.db_session.add(measurement)
            self.db_session.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–¥–∞–Ω–∏—è
            self.update_building_stats(data, deviation, is_anomaly)

            logger.debug(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–ª—è {data['address']}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.db_session.rollback()

    def update_building_stats(self, data, deviation, is_anomaly):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–¥–∞–Ω–∏—é - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ –°–ï–°–°–ò–Æ –∫–∞–∂–¥—ã–π —Ä–∞–∑
            from models import get_db
            db = next(get_db())

            building_id = data['building_id']
            stats = db.query(BuildingStats).filter_by(building_id=building_id).first()

            if not stats:
                stats = BuildingStats(
                    building_id=building_id,
                    address=data['address'],
                    itp_id=data.get('itp_id'),
                    total_measurements=0,
                    anomaly_count=0,
                    last_measurement=datetime.utcnow()
                )
                db.add(stats)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ building_stats –¥–ª—è {building_id}")

            stats.total_measurements += 1
            if is_anomaly:
                stats.anomaly_count += 1
            stats.last_measurement = datetime.utcnow()
            stats.updated_at = datetime.utcnow()

            db.commit()
            logger.debug(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {building_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {data['building_id']}: {e}")
            if 'db' in locals():
                db.rollback()
        finally:
            if 'db' in locals():
                db.close()  # –í–ê–ñ–ù–û: –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é

    def start_generation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        self.running = True
        self.thread = threading.Thread(target=self._generation_loop)
        self.thread.start()
        logger.info("üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")

    def _generation_loop(self):
        """–¶–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        while self.running:
            building = random.choice(self.buildings)
            measurement = self.generate_measurement(building)

            logger.info(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: {measurement['building_id']} | "
                        f"–•–í–°: {measurement['hvs_value']} –º¬≥ | "
                        f"–ì–í–°1: {measurement['gvs_flow1_value']} –º¬≥ | "
                        f"–ì–í–°2: {measurement['gvs_flow2_value']} –º¬≥ | "
                        f"–ì–í–° total: {measurement['gvs_total']} –º¬≥ | "
                        f"–°—Ü–µ–Ω–∞—Ä–∏–π: {measurement['scenario']}")

            time.sleep(random.uniform(1, 3))

    def stop_generation(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        self.running = False
        if self.thread:
            self.thread.join()
        self.producer.flush()
        logger.info("üõë –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    generator = DataGenerator()

    try:
        generator.start_generation()
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        generator.stop_generation()