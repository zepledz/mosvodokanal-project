import json
import logging
import os
from datetime import datetime
from kafka import KafkaConsumer
import time
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class TestConsumer:
    def __init__(self, bootstrap_servers=None, topics=None):
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º kafka:9092 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Docker
        self.bootstrap_servers = bootstrap_servers or ['kafka:9092']
        self.topics = topics or ['water_measurements', 'raw-measurements']  # –û–ë–ù–û–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ç–æ–ø–∏–∫–∞
        self.running = True

    def calculate_anomaly(self, data):
        """–†–∞—Å—á–µ—Ç –∞–Ω–æ–º–∞–ª–∏–∏ –º–µ–∂–¥—É –•–í–° –∏ –ì–í–° —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            # –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –¥–≤—É–º—è –∫–∞–Ω–∞–ª–∞–º–∏ –ì–í–°
            cold_water = data.get('cold_water', data.get('hvs_value', 0))

            # –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º gvs_total –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑ –¥–≤—É—Ö –∫–∞–Ω–∞–ª–æ–≤
            if 'gvs_total' in data:
                hot_water = data.get('gvs_total')
            elif 'gvs_flow1_value' in data and 'gvs_flow2_value' in data:
                # –†–∞—Å—á–µ—Ç –¥–ª—è —Ü–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω–æ–π —Å—Ö–µ–º—ã
                hot_water = float(data.get('gvs_flow1_value', 0)) - float(data.get('gvs_flow2_value', 0))
            else:
                # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                hot_water = data.get('hot_water', data.get('gvs_value', 0))

            cold_water = float(cold_water) if cold_water else 0
            hot_water = float(hot_water) if hot_water else 0

            if cold_water > 0:
                deviation = abs((hot_water / cold_water) - 1) * 100
            else:
                deviation = 0

            is_anomaly = deviation > 10
            return deviation, is_anomaly

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–∏: {e}")
            return 0, False

    def print_message_info(self, message, topic):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        try:
            data = message.value
            deviation, is_anomaly = self.calculate_anomaly(data)

            print("=" * 80)
            print(f"üì® –¢–û–ü–ò–ö: {topic}")
            print(f"‚è∞ –í–†–ï–ú–Ø: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"üîë –ö–õ–Æ–ß: {message.key}")
            print(f"üìä –ü–ê–†–¢–ò–¶–ò–Ø: {message.partition}")
            print(f"üìç –û–§–§–°–ï–¢: {message.offset}")
            print("-" * 40)

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            address = data.get('address', data.get('building', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å'))
            print(f"üè¢ –ê–î–†–ï–°: {address}")
            print(f"üÜî ID –∑–¥–∞–Ω–∏—è: {data.get('building_id', 'N/A')}")
            print(f"üè≠ ID –ò–¢–ü: {data.get('itp_id', 'N/A')}")  # –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –ò–¢–ü
            print(f"üìü ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {data.get('device_id', 'N/A')}")
            print(f"üéØ –°–¶–ï–ù–ê–†–ò–ô: {data.get('scenario', 'N/A')}")

            # –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö –∫–∞–Ω–∞–ª–æ–≤ –ì–í–°
            cold_water = data.get('cold_water', data.get('hvs_value', 'N/A'))

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–∞ –∫–∞–Ω–∞–ª–∞ –ì–í–° –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'gvs_flow1_value' in data and 'gvs_flow2_value' in data:
                gvs_flow1 = data.get('gvs_flow1_value', 'N/A')
                gvs_flow2 = data.get('gvs_flow2_value', 'N/A')
                gvs_total = data.get('gvs_total', 'N/A')
                print(f"üíß –•–í–°: {cold_water}")
                print(f"üî• –ì–í–° –∫–∞–Ω–∞–ª 1: {gvs_flow1}")
                print(f"üî• –ì–í–° –∫–∞–Ω–∞–ª 2: {gvs_flow2}")
                print(f"üî• –ì–í–° –û–ë–©–ï–ï: {gvs_total}")
            else:
                # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                hot_water = data.get('hot_water', data.get('gvs_value', 'N/A'))
                print(f"üíß –•–í–°: {cold_water}")
                print(f"üî• –ì–í–°: {hot_water}")

            print(f"üìà –û–¢–ö–õ–û–ù–ï–ù–ò–ï: {deviation:.2f}%")

            # –°—Ç–∞—Ç—É—Å –∞–Ω–æ–º–∞–ª–∏–∏
            if is_anomaly:
                print(f"üö® –°–¢–ê–¢–£–°: –ê–ù–û–ú–ê–õ–ò–Ø (>{10}%)")
            else:
                print(f"‚úÖ –°–¢–ê–¢–£–°: –ù–û–†–ú–ê")

            # –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if 'hvs_water_meter_id' in data:
                print(f"üìä –°—á–µ—Ç—á–∏–∫ –•–í–°: {data.get('hvs_water_meter_id')}")
            if 'gvs_flowmeter1_id' in data:
                print(f"üìä –°—á–µ—Ç—á–∏–∫ –ì–í–°1: {data.get('gvs_flowmeter1_id')}")
            if 'gvs_flowmeter2_id' in data:
                print(f"üìä –°—á–µ—Ç—á–∏–∫ –ì–í–°2: {data.get('gvs_flowmeter2_id')}")
            if 'measurement_id' in data:
                print(f"üì® ID –∏–∑–º–µ—Ä–µ–Ω–∏—è: {data.get('measurement_id')}")

            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
            if 'fias_id' in data:
                print(f"üè∑Ô∏è FIAS ID: {data.get('fias_id')}")
            if 'unom' in data:
                print(f"üè∑Ô∏è –£–ù–û–ú: {data.get('unom')}")
            if 'message_id' in data:
                print(f"üì® ID —Å–æ–æ–±—â–µ–Ω–∏—è: {data.get('message_id')}")

            print(f"üïí TIMESTAMP: {data.get('timestamp', 'N/A')}")
            print("=" * 80)
            print()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"üì¶ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {message.value}")
            print()

    def start_consuming(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            consumer = KafkaConsumer(
                *self.topics,
                bootstrap_servers=self.bootstrap_servers,
                value_deserializer=lambda m: json.loads(m.decode('utf-8')),
                auto_offset_reset='earliest',
                group_id='test-consumer-group',
                enable_auto_commit=False
            )

            logger.info(f"üöÄ Test Consumer –∑–∞–ø—É—â–µ–Ω")
            logger.info(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {self.bootstrap_servers}")
            logger.info(f"üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ø–∏–∫–æ–≤: {', '.join(self.topics)}")
            logger.info("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print()

            message_count = 0
            start_time = time.time()

            for message in consumer:
                if not self.running:
                    break

                message_count += 1
                self.print_message_info(message, message.topic)

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if message_count % 10 == 0:
                    elapsed_time = time.time() - start_time
                    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {elapsed_time:.1f} —Å–µ–∫")
                    print()

        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ consumer: {e}")
        finally:
            if 'consumer' in locals():
                consumer.close()

    def stop(self):
        self.running = False


def simple_consumer():
    """–ü—Ä–æ—Å—Ç–æ–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º kafka:9092 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        bootstrap_servers = os.getenv('KAFKA_BOOTSTRAP_SERVERS', 'kafka:9092')
        consumer = KafkaConsumer(
            'water_measurements',  # –û–ë–ù–û–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ç–æ–ø–∏–∫–∞
            bootstrap_servers=[bootstrap_servers],
            value_deserializer=lambda m: json.loads(m.decode('utf-8')),
            auto_offset_reset='earliest',
            group_id='simple-test-group'
        )

        print("üöÄ Simple Test Consumer –∑–∞–ø—É—â–µ–Ω")
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {bootstrap_servers}")
        print("üìù –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
        print()

        for i, message in enumerate(consumer):
            data = message.value
            address = data.get('address', data.get('building', 'Unknown'))

            print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ #{i + 1}")
            print(f"üè¢ {address}")
            print(f"üíß –•–í–°: {data.get('hvs_value', data.get('cold_water', 'N/A'))}")

            # –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö –∫–∞–Ω–∞–ª–æ–≤ –ì–í–°
            if 'gvs_flow1_value' in data:
                print(f"üî• –ì–í–°1: {data.get('gvs_flow1_value', 'N/A')}")
                print(f"üî• –ì–í–°2: {data.get('gvs_flow2_value', 'N/A')}")
                print(f"üî• –ì–í–° –û–ë–©: {data.get('gvs_total', 'N/A')}")
            else:
                print(f"üî• –ì–í–°: {data.get('gvs_value', data.get('hot_water', 'N/A'))}")

            print(f"üéØ {data.get('scenario', 'N/A')}")
            print(f"üè≠ –ò–¢–ü: {data.get('itp_id', 'N/A')}")
            print("-" * 50)

    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞"""
    import argparse

    parser = argparse.ArgumentParser(description='Test Kafka Consumer –¥–ª—è –ú–æ—Å–≤–æ–¥–æ–∫–∞–Ω–∞–ª')
    parser.add_argument('--topic', type=str, default='water_measurements',  # –û–ë–ù–û–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        help='–¢–æ–ø–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: water_measurements)')
    parser.add_argument('--bootstrap-servers', type=str, default='kafka:9092',
                        help='Kafka bootstrap servers (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: kafka:9092)')
    parser.add_argument('--from-beginning', action='store_true',
                        help='–ß–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—á–∞–ª–∞')
    parser.add_argument('--simple', action='store_true',
                        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é consumer')

    args = parser.parse_args()

    if args.simple:
        simple_consumer()
        return

    consumer = TestConsumer()
    consumer.bootstrap_servers = [args.bootstrap_servers]
    consumer.topics = [args.topic]

    try:
        consumer.start_consuming()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()