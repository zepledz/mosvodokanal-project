services:
  # Zookeeper для Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  # Kafka брокер
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    ports:
      - "9092:9092"
    networks:
      - kafka-network

  # PostgreSQL база данных
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: mosvodokanal
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kafka-network  # УБРАТЬ ПУСТУЮ СТРОКУ!



  # Redis для кэширования
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - kafka-network

  # Веб-дашборд
  web-dashboard:
    build:
      context: ./services
      dockerfile: Dockerfile.web
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgresql://admin:password@postgres:5432/mosvodokanal
      - REDIS_HOST=redis
    ports:
      - "5000:5000"
    depends_on:
      - kafka
      - postgres
      - redis
    volumes:
      - ./services:/app
    networks:
      - kafka-network
    command: >
      sh -c "python init_users.py &&
             python web_dashboard.py"

  # Генератор данных
  data-generator:
    build:
      context: ./services
      dockerfile: Dockerfile.generator
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DATABASE_URL=postgresql://admin:password@postgres:5432/mosvodokanal
    depends_on:
      - kafka
      - postgres
    networks:
      - kafka-network

  # Тестовый потребитель (мониторинг)
  test-consumer:
    build:
      context: ./services
      dockerfile: Dockerfile.consumer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - kafka-network
    stdin_open: true
    tty: true

volumes:
  postgres_data:

networks:
  kafka-network:
    driver: bridge